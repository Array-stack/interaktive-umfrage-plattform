# Technischer Implementierungsplan für Lehrer-Schüler-Beziehung und Startseite
Basierend auf der aktuellen Codestruktur präsentiere ich einen klaren, technischen Implementierungsplan für die gewünschten Funktionen.

## 1. Datenbank-Änderungen
### 1.1 Neue Tabelle für Lehrer-Schüler-Beziehung
### 1.2 Erweiterung der Surveys-Tabelle
## 2. Backend-Implementierung
### 2.1 Neue Routen für Lehrer-Schüler-Beziehung
Erstelle eine neue Datei teacher.routes.js :

### 2.2 Anpassung der survey.responses.routes.js
Füge automatische Zuordnung von Schülern zu Lehrern hinzu, wenn sie an einer Umfrage teilnehmen:

### 2.3 Anpassung der student.routes.js
Erweitere die Umfrageabfrage, um Umfragen von zugeordneten Lehrern zu priorisieren:

### 2.4 Anpassung der survey.routes.js
Erweitere die Umfrageerstellung um den access_type:

### 2.5 Aktualisierung der routes/index.js
Füge die neuen Lehrer-Routen hinzu:

## 3. Frontend-Implementierung
### 3.1 Erweiterung des surveyService.ts
### 3.2 Neue Komponente für Schülerverwaltung
### 3.3 Anpassung der SurveyDetails.tsx
Zeige die Umfrage-ID für Lehrer an, damit sie diese kopieren können:

### 3.4 Aktualisierung der App.tsx
Füge die neue Route für die Schülerverwaltung hinzu:

### 3.5 Anpassung der TeacherDashboardPage
Füge einen Link zur Schülerverwaltung hinzu:

## 4. Implementierungsschritte
1. Datenbankänderungen :
   
   - Führe die SQL-Befehle aus, um die neue Tabelle zu erstellen und die bestehende zu erweitern
2. Backend-Implementierung :
   
   - Erstelle die neue teacher.routes.js Datei
   - Aktualisiere survey.responses.routes.js für die automatische Zuordnung
   - Aktualisiere student.routes.js für die Priorisierung von Lehrerumfragen
   - Aktualisiere survey.routes.js für den access_type
   - Aktualisiere routes/index.js um die neuen Routen einzubinden
3. Frontend-Implementierung :
   
   - Erweitere surveyService.ts um die neuen API-Endpunkte
   - Erstelle die neue StudentManagement.tsx Komponente
   - Aktualisiere SurveyDetails.tsx um die Umfrage-ID anzuzeigen
   - Aktualisiere App.tsx um die neue Route hinzuzufügen
   - Aktualisiere TeacherDashboardPage.tsx um einen Link zur Schülerverwaltung hinzuzufügen
4. Testen :
   
   - Teste die automatische Zuordnung von Schülern zu Lehrern
   - Teste die manuelle Zuordnung über die Umfrage-ID
   - Teste die Anzeige und Priorisierung von Umfragen für Schüler
   - Teste die Entfernung von Schülern aus der Liste eines Lehrers
## 5. Startseite mit empfohlenen Umfragen
Für die Startseite mit empfohlenen Umfragen können wir die folgende Implementierung verwenden:

### 5.1 Backend-Anpassung
Erstelle eine neue Route für empfohlene Umfragen:

### 5.2 Frontend-Anpassung
Aktualisiere die HomePage.tsx, um empfohlene Umfragen anzuzeigen:

### 5.3 Erweiterung des surveyService.ts
```
/**
 * Ruft empfohlene Umfragen ab
 */
async getRecommendedSurveys(): Promise<any> {
  const response = await fetch(`${API_BASE_URL}/surveys/
  recommended`, {
    method: 'GET',
    headers: getAuthHeader()
  });
  
  return handleApiResponse(response);
},
```
## Zusammenfassung
Dieser Implementierungsplan bietet eine vollständige Lösung für die gewünschten Funktionen:

1. Lehrer-Schüler-Beziehung :
   
   - Automatische Zuordnung von Schülern zu Lehrern, wenn sie an einer Umfrage teilnehmen
   - Manuelle Zuordnung von Schülern über die Umfrage-ID
   - Verwaltung der zugeordneten Schüler durch den Lehrer
2. Startseite mit empfohlenen Umfragen :
   
   - Personalisierte Empfehlungen basierend auf der Benutzerrolle
   - Priorisierung von Umfragen von zugeordneten Lehrern für Schüler
   - Anzeige beliebter öffentlicher Umfragen für nicht angemeldete Benutzer
Die Implementierung nutzt die bestehende Codestruktur und erweitert sie um die neuen Funktionen, ohne grundlegende Änderungen an der Architektur vorzunehmen.